// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package _db

import (
	"context"
	"database/sql"
)

const addPaymentDetails = `-- name: AddPaymentDetails :one
INSERT INTO
  payment_handler.tblm_payment_details (
    "date",
    received_from,
    pan,
    address,
    sum_of_rupees,
    user_id
  )
VALUES
  (
    $1 :: BIGINT,
    $2 :: VARCHAR,
    $3 :: VARCHAR,
    $4 :: TEXT,
    $5 :: BIGINT,
    $6 :: VARCHAR
  ) RETURNING DATE,
  received_from,
  pan,
  address,
  sum_of_rupees,
  id,
  user_id
`

type AddPaymentDetailsParams struct {
	Column1 int64
	Column2 string
	Column3 string
	Column4 string
	Column5 int64
	Column6 string
}

type AddPaymentDetailsRow struct {
	Date         int64
	ReceivedFrom string
	Pan          string
	Address      string
	SumOfRupees  string
	ID           sql.NullInt32
	UserID       sql.NullString
}

func (q *Queries) AddPaymentDetails(ctx context.Context, arg AddPaymentDetailsParams) (AddPaymentDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, addPaymentDetails,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
	)
	var i AddPaymentDetailsRow
	err := row.Scan(
		&i.Date,
		&i.ReceivedFrom,
		&i.Pan,
		&i.Address,
		&i.SumOfRupees,
		&i.ID,
		&i.UserID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO
  payment_handler.tblm_users (user_id, "role", "name")
VALUES
  ($1, $2, $3) RETURNING user_id,
  "name",
  "role"
`

type CreateUserParams struct {
	UserID string
	Role   string
	Name   string
}

type CreateUserRow struct {
	UserID string
	Name   string
	Role   string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.UserID, arg.Role, arg.Name)
	var i CreateUserRow
	err := row.Scan(&i.UserID, &i.Name, &i.Role)
	return i, err
}

const getPaymentDetails = `-- name: GetPaymentDetails :one
SELECT
  id,
  "date",
  received_from,
  pan,
  address,
  sum_of_rupees
FROM
  payment_handler.tblm_payment_details
WHERE
  id = $1 :: INTEGER
`

type GetPaymentDetailsRow struct {
	ID           sql.NullInt32
	Date         int64
	ReceivedFrom string
	Pan          string
	Address      string
	SumOfRupees  string
}

func (q *Queries) GetPaymentDetails(ctx context.Context, dollar_1 int32) (GetPaymentDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, getPaymentDetails, dollar_1)
	var i GetPaymentDetailsRow
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.ReceivedFrom,
		&i.Pan,
		&i.Address,
		&i.SumOfRupees,
	)
	return i, err
}

const listPaymentDetails = `-- name: ListPaymentDetails :many
SELECT
  received_from,
  "date",
  sum_of_rupees,
  id
FROM
  payment_handler.tblm_payment_details
WHERE
  received_from ILIKE '%' || $1 :: VARCHAR || '%'
  OR CAST(sum_of_rupees AS VARCHAR) ILIKE '%' || $1 :: VARCHAR || '%'
`

type ListPaymentDetailsRow struct {
	ReceivedFrom string
	Date         int64
	SumOfRupees  string
	ID           sql.NullInt32
}

func (q *Queries) ListPaymentDetails(ctx context.Context, dollar_1 string) ([]ListPaymentDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentDetails, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPaymentDetailsRow
	for rows.Next() {
		var i ListPaymentDetailsRow
		if err := rows.Scan(
			&i.ReceivedFrom,
			&i.Date,
			&i.SumOfRupees,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
